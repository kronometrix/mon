#!/bin/sh

#  Copyright (c) 2015 Stefan Parvu (www.kronometrix.org).
#
#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License
#  as published by the Free Software Foundation; either version 2
#  of the License, or (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software Foundation,
#  Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#
#  (http://www.gnu.org/copyleft/gpl.html)


RETVAL=0
OS_NAME=`uname -s`

KRMX_PREFIX="/opt/kronometrix/mon"
KRMX_ETC=${KRMX_PREFIX}/etc
KRMX_LOG=${KRMX_PREFIX}/log
RECORDERS="sys"
TRANSPORT="sender"

test -f ${KRMX_ETC}/sysrec.start  || exit 0
test -f ${KRMX_BIN}/sender || exit 0


start_rec() {
    echo "Starting Kronometrix Appliance Monitoring services"

    for rec in $RECORDERS
    do
        RETVAL=0

        # check pid before start
        if [ -f ${KRMX_LOG}/${rec}rec.pid ]; then
            kill -0 `cat ${KRMX_LOG}/${rec}rec.pid` >/dev/null 2>&1
            if [ $? -ne 0 ]; then
                ${KRMX_ETC}/${rec}rec.start
                RETVAL=$?
            else
                RETVAL=1
            fi
            [ $RETVAL -eq 0 ] && echo "ok" || echo "failed"
        else
            # no pid files
            ${KRMX_ETC}/${rec}rec.start
            RETVAL=$?
            [ $RETVAL -eq 0 ] && echo "ok" || echo "failed"
        fi
    done

    return $RETVAL
}

start_trans() {

    echo "Starting Kronometrix transport"

    RETVAL=0

    # check pid before start
    if [ -f ${KRMX_LOG}/${TRANSPORT}.pid ]; then
        kill -0 `cat ${KRMX_LOG}/${TRANSPORT}.pid` >/dev/null 2>&1
        if [ $? -ne 0 ]; then
            ${KRMX_BIN}/${TRANSPORT} -t5 10 >/dev/null 2>&1
            RETVAL=$?
        else
            RETVAL=1
        fi
        [ $RETVAL -eq 0 ] && echo "ok" || echo "failed"
    else
        # no pid files
        ${KRMX_BIN}/${TRANSPORT} -t5 10 >/dev/null 2>&1
        RETVAL=$?
        [ $RETVAL -eq 0 ] && echo "ok" || echo "failed"
    fi

    return $RETVAL
}

stop_trans() {

    echo "Stopping Kronometrix transport"

    RETVAL=0

    if [ -f ${KRMX_LOG}/${TRANSPORT}.pid ]; then
        kill `cat ${KRMX_LOG}/${TRANSPORT}.pid` >/dev/null 2>&1
        RETVAL=$?
        [ $RETVAL -eq 0 ] && echo "ok" || echo "failed"
        
        # clean-up transport pid file
        rm ${KRMX_LOG}/${TRANSPORT}.pid

    else
        RETVAL=1
        [ $RETVAL -eq 0 ] && echo "ok" || echo "failed"
    fi

    return $RETVAL
}



stop() {
    echo "Stopping Kronometrix Appliance Monitoring services"

    for rec in $RECORDERS
    do
        RETVAL=0

        if [ -f ${KRMX_LOG}/${rec}rec.pid ]; then
            # webrec
            if [ "X$rec" = "Xweb" ]; then
                case "$OS_NAME" in
                  SunOS)
                   kill `ptree \`cat ${KRMX_LOG}/webrec.pid\` | awk '{print $1}' | xargs | awk '{print $2}'` >/dev/null 2>&1
                   RETVAL=$?
                   [ $RETVAL -eq 0 ] && echo "ok" || echo "failed"
                   continue
                   ;;
 
                  Linux)
                   kill `cat ${KRMX_LOG}/webrec.pid` >/dev/null 2>&1
                   RETVAL=$?
                   [ $RETVAL -eq 0 ] && echo "ok" || echo "failed"
                   continue
                   ;;

                  *)
                   echo "Error: not supported OS"
                   exit 1
                   ;;
                esac
            fi
                 
            kill `cat ${KRMX_LOG}/${rec}rec.pid` >/dev/null 2>&1
            RETVAL=$?
            [ $RETVAL -eq 0 ] && echo "ok" || echo "failed"

            # clean-up pid file
            rm ${KRMX_LOG}/${rec}rec.pid

        else
            RETVAL=1
            [ $RETVAL -eq 0 ] && echo "ok" || echo "failed"
        fi
    done

    return $RETVAL
}

status() {
    echo "Status Kronometrix recorders"

    for rec in $RECORDERS
    do
        RETVAL=0

        if [ "X${OS_NAME}" = "XSunOS" ]; then
            echo " ${rec}rec: \c"
        else
            echo -n " ${rec}rec: "
        fi
           
        # check pid before start
        if [ -f ${KRMX_LOG}/${rec}rec.pid ]; then
            kill -0 `cat ${KRMX_LOG}/${rec}rec.pid` >/dev/null 2>&1
            if [ $? -ne 1 ]; then
                RETVAL=$?
                PID=`cat ${KRMX_LOG}/${rec}rec.pid`
            else
                RETVAL=1
            fi
            [ $RETVAL -eq 0 ] && echo "running, pid: $PID" || echo "not running"
        else
            # no pid files
            RETVAL=1
            [ $RETVAL -eq 0 ] && echo "ok" || echo "failed"
        fi
    done

    return $RETVAL
}

case "$1" in
   start)
      start
      ;;
   stop)
      stop
      ;;
   restart)
      stop
      start
      ;;
   status)
      status
      ;;
   *)
      echo "Usage: $0 {start|stop|restart|status}"
      exit 1
esac
exit $RETVAL
