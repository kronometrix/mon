#!/opt/kronometrix/mon/perl/bin/perl
#
#  Copyright (c) 2015 Stefan Parvu (www.kronometrix.org).
#
#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License
#  as published by the Free Software Foundation; either version 2
#  of the License, or (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software Foundation,
#  Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#
#  (http://www.gnu.org/copyleft/gpl.html)

use strict;
use warnings;
use JSON;
use File::Tail;
use File::Temp qw(tempfile);
use File::Copy;
use File::Basename;
use UUID::Tiny ':std';
use Digest::SHA;
use HTTP::Tiny;
use Getopt::Std;
use BSD::Sysctl qw(sysctl);
use Proc::Daemon;
use Proc::PID::File;
use Time::HiRes;
use HTTP::Response;

###  Process command line args
usage() if defined $ARGV[0] and $ARGV[0] eq "--help";
getopts('t:hvV') or usage();
usage()    if defined $main::opt_h;
revision() if defined $main::opt_V;

# verbose flag
my $verbose = defined $main::opt_v ? $main::opt_v : 0;

# timeout
my $timeout = defined $main::opt_t ? $main::opt_t : 25;

# process [interval]
my $interval;

if ( defined $ARGV[0] ) {
    $interval = $ARGV[0];
    usage() if $interval == 0;
}
else {
    $interval = 60;
}

###  Variables
$main::opt_h = 0;    # help option
$main::opt_V = 0;    # revision option
my $cfile = 'kronometrix.json';    # configuration file
my $cdata;                 # configuration data
my $tcpka = 0;             # transport TCP keepalive settings
my $sid   = "";            # subscription id
my $token = "NA";          # token id
my @files;

## configuration
my ( $baselog, $curlog, $slog );
my @dbs;
my %appliance;

local $| = 1;

### MAIN BODY #

# Default krd
my @recs = qw(sys cpu disk nic hdw);

# daemon name
my $dname = basename($0);

# osname
my $osname = "$^O";

# read configuration
$cdata = open_config($cfile);

# get OS host UUID
get_hostid($cdata);

# logs
( $baselog, $curlog ) = get_log($cdata);
$slog = $baselog . "/sender.log";

# datafile
@dbs = get_datafile($cdata);

# appliance destination
%appliance = get_appliance($cdata);

print "appliance hash: " . keys(%appliance) . ".\n";
for my $key ( keys %appliance ) {
    my $value = $appliance{$key};
    print "$key => $value\n";
}

# SIGHUP handler
$SIG{HUP} = \&reload_config;

# Daemonize
eval {
    Proc::Daemon::Init(
        {
            child_STDOUT => "+>>$slog",
            child_STDERR => "+>>$slog"
        }
    );
};

if ($@) {
    die "error: boot - cannot start daemon: $@";
}
else {
    writelog("info: boot - daemon $dname initialized");
}

# If already running, then exit
if ( Proc::PID::File->running( { dir => "$baselog" } ) ) {
    exit 0;
}

# cd krd raw data directory
chdir("$curlog")
  or die "error: main - cannot open raw data directory, $!\n";

foreach (@dbs) {
    my $n = $_ . "rec.krd";
    push(
        @files,
        File::Tail->new(
            name               => "$n",
            interval           => 1,
            maxinterval        => $interval,
            ignore_nonexistant => 1
        )
    );
}

# init HTTP transport
my $http = HTTP::Tiny->new(keep_alive => $tcpka,
                           agent => 'Kronometrix_FreeBSD/1.0');

# main loop
while (1) {

    my ( $nfound, $timeleft, @pending ) =
      File::Tail::select( undef, undef, undef, $timeout, @files );

    # timeout - do something else here, if you need to
    unless ($nfound) {
        writelog("info: main - no krd raw data found, checking...")
          if ( $verbose == 1 );
    }
    else {

        ## raw data arrival
        writelog("info: main - krd raw data found")
          if ( $verbose == 1 );

        my $rcode = 0;
        foreach (@pending) {
            my $delta = $_->read;
            chomp($delta);

            # parse id
            my $msgid;
            my $devid;
            my $lmoid;

            if ( $_->{"input"} =~ /sysrec/ ) {
                $lmoid = 'krmxmon';
                $devid = 'system';
                $msgid = "krmx-mon-system";
            }

            # each appliance
            for my $key ( keys %appliance ) {
                my $value = $appliance{$key};

                ## value format
                # cpd:hostname2:443:00000000000000000000000000000000
                # lmo:host:port:sid => $token:$proto:$ka
                my ( $lid, $hname, $port, $sid ) = split ( /:/, $key );
                my ( $dsid, $tid, $proto, $ka ) = split( /:/, $value );

                writelog("info: main - $lid => $hname:$port:$sid  value=$dsid:$tid:$proto:$ka"
                ) if ( $verbose == 1 );

                if ($lid eq $lmoid ) {
                    
                    # writelog("debug: main - $lid/$msgid => $hname:$port:$sid:$tid");
                    send_data( $http, $hname, $sid, $tid, $dsid,
                        $msgid, $devid, $proto, $port, $delta );
                }
            }
            print "\n" . $_->{"input"} . " payload[" . $delta . "]"
              if ( $verbose == 1 );

        }    # for

    }    # else raw data

}    # while loop

### Subroutines

## configuration file


# open JSON configuration file
sub open_config {

    my ($conf) = @_;

    my $json_data;

    {
        local $/;

        # we will parse now the file
        if ( defined $ENV{'KRMX_PREFIX'} ) {
            if ( -e "$ENV{'KRMX_PREFIX'}/etc/$conf" ) {
                open my $fh, "<", "$ENV{'KRMX_PREFIX'}/etc/$conf";
                $json_data = <$fh>;
                close $fh;
            }
            else {
                print "error: open_conf - $! $ENV{'KRMX_PREFIX'}/etc/$conf \n";
                usage();
            }
        }
        else {
            if ( -e "/opt/kronometrix/mon/etc/$conf" ) {
                open my $fh, "<", "/opt/kronometrix/mon/etc/$conf";
                $json_data = <$fh>;
                close $fh;
            }
            else {
                print "error: open_conf - $! /opt/kronometrix/mon/etc/$conf \n";
                usage();
            }
        }
    }

    my $perl_data = JSON->new->utf8->decode($json_data);

    return $perl_data;
}


# write config file
sub write_config {

    my ( $conf, $perl_data ) = @_;

    # JSON Object
    my $json_data = JSON->new->utf8->pretty->encode($perl_data);

    # we will parse now the file
    if ( defined $ENV{'KRMX_PREFIX'} ) {
        if ( -e "$ENV{'KRMX_PREFIX'}/etc/$conf" ) {
            open my $fh, ">", "$ENV{'KRMX_PREFIX'}/etc/$conf.tmp";

            # print $fh encode_json($data);
            print $fh $json_data;
            close $fh;
            move(
                "$ENV{'KRMX_PREFIX'}/etc/$conf.tmp",
                "$ENV{'KRMX_PREFIX'}/etc/$conf"
            ) or die "Error: cannot update $conf: $!";

        }
        else {
            print "error: write_config - $! $ENV{'KRMX_PREFIX'}/etc/$conf \n";
            usage();
        }
    }
    else {
        if ( -e "/opt/kronometrix/mon/etc/$conf" ) {
            open my $fh, ">", "/opt/kronometrix/mon/etc/$conf.tmp";
            print $fh $json_data;
            close $fh;
            move( "/opt/kronometrix/mon/etc/$conf.tmp", "/opt/kronometrix/mon/etc/$conf" )
              or die "Error: cannot update $conf: $!";
        }
        else {
            print "error: write_config - $! /opt/kronometrix/mon/etc/$conf \n";
            usage();
        }
    }
}


# reload configuration
sub reload_config {

    writelog("info: main - signal HUP received, reload armed...");

    $cdata = open_config($cfile);

    ## hostid
    get_hostid($cdata);

    ## datafile
    @dbs = get_datafile($cdata);

    ## appliance destination
    %appliance = get_appliance($cdata);

    return;
}


# get_devid, returns device_id
sub get_devid {

    my ( $pos, $krd ) = @_;
    my $device_id;

    my @krd = split( /:/, $krd );

    $device_id = $krd[$pos];

    writelog("info: get_devid - devid=$device_id")
      if ( $verbose == 1 );

    # device_id
    return $device_id;
}


# get hostuuid
sub new_hostid {

    # host UUID
    my $hb  = BSD::Sysctl->new('kern.hostuuid');
    my $hid = $hb->get();
    chop($hid);

    # return new host UUID
    return $hid;
}


# get hostid
sub get_hostid {

    my ($data) = @_;

    # get hostuuid
    my $h = new_hostid;

    # populate DSID
    make_dsid($data, $h);
}


# make data source ids, dsid
sub make_dsid {

    my ($data, $huuid) = @_;
    my @lmo = ('krmxmon');

    # sid - subscription id
    # dsid - data source id
    # get all sids and generate dsid for each
    # dsid must be unique per sid

    my @applx = @{ $data->{'transport'}->{'appliance'} };

    # populate dsid for each appliance and lmo
    foreach my $appliance (@applx) {
        my ($sid, $tid, $dsid);

        my $host  = $appliance->{'host'};
        my $port  = $appliance->{'port'};

        # last call, look for subscription id, sid

        foreach my $mo (@lmo) {

            if ($appliance->{"$mo"}) {

                my @sub = @{ $appliance->{"$mo"} };

                foreach my $sd (@sub) {

                    # get sid, tid
                    $sid = $sd ->{'sid'};
                    $tid = $sd ->{'tid'};

                    # get dsid
                    $dsid = $sd ->{'dsid'};
                   
                    if ($dsid eq "" ) {

                        if ( $sid ne "" ) {
                            my $str = $huuid . $sid;
                            $dsid = create_uuid_as_string(UUID_V5,$str);
                            chomp($dsid);
                            # print "sid=$sid tid=$tid dsid=$dsid\n";
                            $sd->{'dsid'} = $dsid;
                            write_config( $cfile, $data );
                        } else {
                            exit 1;
                        }
                    } else {
                        my $str = $huuid . $sid;
                        my $dsid_man = create_uuid_as_string(UUID_V5,$str);
                        chomp($dsid_man);

                        if ( $dsid ne $dsid_man ) {
                            # we need to update json file
                            # print "Not OK: $dsid => $dsid_man\n";
                            $sd->{'dsid'} = $dsid_man;
                            write_config( $cfile, $data );
                        }
                    }
                }
            }
        }
    }
}


# get logs
sub get_log {
    my ($data) = @_;

    my $bpath = $data->{'log'}->{'base_path'};
    my $cpath = $data->{'log'}->{'current_path'};

    return ( $bpath, $cpath );
}


# get datafile
sub get_datafile {

    my ($data) = @_;
    my $schilds = 0;
    my @d;
    my @temp = @{ $data->{'transport'}->{'data_file'} };

    # load d array
    foreach my $f (@temp) {
        push @d, $f->{"name"};
        $schilds++;
    }

    @d = @recs if ( $schilds == 0 );

    return @d;
}


# get appliance information
sub get_appliance {

    my ($data) = @_;
    my %appl;

    my @lmo = ('krmxmon');

    my @temp = @{ $data->{'transport'}->{'appliance'} };

    foreach my $f (@temp) {
        my ($sid, $tid, $dsid);

        my $ka    = $f->{'keepalive'};
        my $proto = $f->{'protocol'};
        my $host  = $f->{'host'};
        my $port  = $f->{'port'};

        # last call, look for subscription

        foreach my $mo (@lmo) {

            if ($f->{"$mo"}) {

                my @sub = @{ $f->{"$mo"} };

                foreach my $sd (@sub) {

                    # get sid, tid, dsid
                    $sid  = $sd ->{'sid'};
                    $tid  = $sd ->{'tid'};
                    $dsid = $sd ->{'dsid'};

                    if ( defined($host)
                         and defined($sid)
                         and defined($dsid)
                         and defined($tid)
                         and defined($proto)
                         and defined($port)
                         and defined($ka) ) {
                        my $keyapp = $mo . ":" . $host . ":" . $port . ":" . $sid;
                        $appl{$keyapp} = "$dsid:$tid:$proto:$ka";
                    }
                }
            }
        }
    }

    return %appl;
}


## auxiliares

# write log message
sub writelog {

    my ($logbuf) = @_;
    my ( $sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst ) =
      localtime(time);

    my $dt = sprintf "%4d-%02d-%02d %02d:%02d:%02d",
      $year + 1900, $mon + 1, $mday, $hour, $min, $sec;

    print "\n$dt $logbuf";

    return;
}


sub send_data {

    my (
        $curl,  $dest,   $sid,   $token, $dsid,
        $msg_id, $dev_id, $proto, $port,  $delta
    ) = @_;
    my $response;

    ## http://server:port/api/private/kstats
    my $url = "$proto://" . $dest . ":" . $port . "/api/private/kstats";

    my ($hash, $post);

    if ( $msg_id =~ /cpurec|diskrec|nicrec/ ) {
        $hash   = sha256krd("$msg_id:$sid:$dsid:$delta");
        $post   = "$msg_id:$sid:$dsid:$delta:$hash";
    } else {
        $hash   = sha256krd("$msg_id:$sid:$dsid:$dev_id:$delta");
        $post   = "$msg_id:$sid:$dsid:$dev_id:$delta:$hash";
    }
    writelog("info: send_data - $post data to be delivered")
        if ( $verbose == 1 );

    $response = $http->request('POST', $url, {
        content => $post,
        headers => { 'krono-user' => '{"username":"admin"}',
                     'content-type' => 'application/x-www-form-urlencoded'},});

    my $status = $response->{status};

    if ( $verbose == 1 ) {

        if ($response->{success} ) {
            writelog("info: send_data - $msg_id krd data delivered");
        } else {
            writelog(
            "error: send_data - cant send $msg_id krd data, transport error");
        }
    }

    return;

}


# NIST SHA-256 message digest for krd raw data
sub sha256krd {
    my ($message) = @_;

    # compute SHA-256
    my $state = Digest::SHA->new(256);

    $state->add($message);
    my $digest = $state->hexdigest;

    return $digest;
}


# usage - print usage and exit.
sub usage {
    print STDERR <<END;
USAGE: sender [-t secs] [-hvV] | [interval]
OPTIONS:
  -t        : timeout in seconds
  -h        : help information
  -h        : verbose information
  -V        : release version
  interval  : maximum number of seconds between samples, default 60, will 
              never spend more than that without checking data

 e.g. sender     check and send krd raw data, every 60 secs
      sender 10  check and send krd raw data, every 10 secs
END
    exit 0;
}


# revision - print revision and exit
sub revision {
    print STDERR <<END;
sender: 1.0.17, 2015-09-19 1353
END
    exit 0;
}
